\begin{thebibliography}{10}

\bibitem{EQT2009}
T.~Elmas, S.~Qadeer, and S.~Tasiran.
\newblock A calculus of atomic actions.
\newblock In {\em POPL}, pages(2-15), 2009.

\bibitem{Lam1979}
L. Lamport.
\newblock How to make a multiprocessor computer that correctly executes multiprocess programs.
\newblock In {\em IEEE Trans. Comp.}, C-28(9): pages(690–691), 1979.

\bibitem{AG1996}
S.~Adve and K.~Gharachorloo.
\newblock Shared memory consistency models: a tutorial.
\newblock In {\em Computer}, 29(12): pages(66–76), 1996.

\bibitem{SJM+2007}
V.A.~Saraswat, R.~Jagadeesan, M.~Michael and C.~Von Praun.
\newblock A theory of memory models.
\newblock In {\em PPoPP}, ACM: pages(161-172), 2007.

\bibitem{Hil1998}
M.~Hill.
\newblock Multiprocessors should support simple memory-consistency models.
\newblock In {\em IEEE Computer}, 31(8): pages(28–34), 1998.

\bibitem{OSS2009}
S.~Owens, S.~Sarkar and P~Sewell.
\newblock A better x86 memory model: x86-TSO.
\newblock In {\em TPHOLs}, pages(391-407), 2009.

\bibitem{Owe2010}
S.~Owens.
\newblock Reasoning about the implementation of concurrency abstractions on x86-TSO.
\newblock In {\em ECOOP}, 2010.

\bibitem{BSS2010}
J.~Burnim, K.~Sen and C.~Stergiou.
\newblock Sound and complete monitoring of sequential consistency in relaxed memory models.
\newblock In {\em Tech. Rep. UCB/EECS} page(31), 2010.

\bibitem{LW2010}
A.~Linden and P.~Wolper.
\newblock  An automata-based symbolic approach for verifying programs on relaxed memory models.
\newblock In {\em SPIN}, pages(212-226), 2010.

\bibitem{LW2013}
A.~Linden and P.~Wolper.
\newblock  A verification-based approach to memory fence insertion in PSO memory systems.
\newblock In {\em TACAS}, pages(339-353), 2013.

\bibitem{GJJ2006}
T. L.~Gall, B.~Jeannet and T.~Jron.
\newblock Verification of communication protocols using abstract interpretation of FIFO queues. 
\newblock In {\em AMAST}, pages(204–219), 2006

\bibitem{PD1995}
S.~Park and D. L.~Dill. 
\newblock An executable specification, analyzer and verifier for RMO (relaxed memory order).
\newblock In {\em SPAA}, pages(34–41), 1995.

\bibitem{HR2006}
T.~Huynh and A.~Roychoudhury.
\newblock A memory model sensitive checker for CSharp. 
\newblock In {\em Formal Methods (FM)}, LNCS 4085, pages(476–491). Springer, 2006.

\bibitem{DPN1993}
D.~Dill, S.~Park, and A.~Nowatzyk. 
\newblock Formal specification of abstract memory models.
\newblock In {\em Symposium on Research on Integrated Systems}, pages(38–52). MIT Press, 1993.

\bibitem{BAM2006}
S.~Burckhardt, R.~Alur, and M.~Martin. 
\newblock Bounded verification of concurrent data types on relaxed memory models: A case study. 
\newblock In {\em Computer-Aided Verification (CAV)}, LNCS 4144, pages(489–502). Springer, 2006.

\bibitem{BAM2007}
S.~Burckhardt, R.~Alur, and M.~Martin. 
\newblock CheckFence: Checking consistency of concurrent data types on relaxed memory models.
\newblock In {\em PLDI}, pages(12–21), 2007.

\bibitem{GYS2004}
G.~Gopalakrishnan, Y.~Yang, and H.~Sivaraj.
\newblock QB or not QB: An efficient execution verification tool for memory orderings.
\newblock In {\em CAV}, LNCS 3114, pages(401–413), 2004.

\bibitem{YGL+2004}
Y.~Yang, G.~Gopalakrishnan, G.~Lindstrom, and K.~Slind.
\newblock Nemos: A framework for axiomatic and executable specifications of memory consistency models. 
\newblock In {\em IPDPS}, 2004.

\bibitem{BM2008}
S.~Burckhardt and M.~Musuvathi.
\newblock Effective program verification for relaxed memory models.
\newblock In {\em Technical Report MSR-TR-2008-12}, Microsoft Research, 2008.

\bibitem{KVY2010}
M.~Kuperstein, M.~Vechev and E.~Yahav.
\newblock Automatic inference of memory fences.
\newblock In {\em FMCAD}, pages(111–119), 2010.

\bibitem{KVY2011}
M.~Kuperstein, M.~Vechev and E.~Yahav.
\newblock Partial-coherence abstractions for relaxed memory models.
\newblock In {\em PLDI}, pages(187-198), 2011.

\bibitem{VY2008}
M.~Vechev and E.~Yahav.
\newblock Deriving linearizable fine-grained concurrent objects.
\newblock In {\em PLDI}, pages(125–135), 2008.

\bibitem{VYY2010}
M.~Vechev, E.~Yahav and G.~Yorsh.
\newblock Abstraction-guided synthesis of synchronization.
\newblock In {\em POPL}  pages(327–338), 2010.

\bibitem{VYB+2007}
M.~Vechev, E.~Yahav, D. F.~ Bacon and N.~Rinetzky.
\newblock CGCExplorer: a semi-automated search procedure for provably correct concurrent collectors.
\newblock In {\em PLDI} pages(456-467), 2007.

\bibitem{VYY2009}
M.~Vechev, E.~Yahav and G.~Yorsh.
\newblock Inferring synchronization under limited observability. 
\newblock In {\em TACAS}, pages(139–154), 2009.

\bibitem{DMV+2013}
A.~Dan, Y.~Meshman, M.~Vechev and E.~Yahav.
\newblock Predicate Abstraction for Relaxed Memory Models. 
\newblock In {\em SAS}, pages(84–104), 2013.

\bibitem{MDV+2014}
Y.~Meshman, A.~Dan, M.~Vechev and E.~Yahav.
\newblock Synthesis of Memory Fences via Refinement Propagation.
\newblock In {\em SAS}, pages(), 2014.

\bibitem{LNP+2012}
F.~Liu, N.~Nedev, N.~Prisadnikov, M.~Vechev and E.~Yahav.
\newblock Dynamic synthesis for relaxed memory models. 
\newblock In {\em PLDI}, pages(429-440), 2012.

\bibitem{ND2013}
B.~Norris and B.~Demsky.
\newblock CDSchecker: checking concurrent data structures written with C/C++ atomics
\newblock In {\em OOPSLA}, pages(131-150), 2013.

\bibitem{FLM2003}
X. Fang, J. Lee, and S. Midkiff.
\newblock Automatic fence insertion for shared memory multiprocessing.
\newblock In {\em ICS}, pages(285–294), 2003.

\bibitem{LP2001}
J.~Lee and D. A.~Padua.
\newblock Hiding relaxed memory consistency with a compiler.
\newblock In {\em IEEE Trans. Comput.}, pages(824–833), 2001.

\bibitem{SS1998}
D.~Shasha and M.~Snir.
\newblock Efficient and correct execution of parallel programs that share memory.
\newblock In {\em ACM Trans. Program. Lang. Syst.}, pages(282–312), 1988.

\bibitem{AMS+2010}
J.~Alglave, L.~Maranget, S.~Sarkar and P.~Sewell. 
\newblock Fences in Weak Memory Models.
\newblock In {\em CAV}, pages(258-272), 2010.

\bibitem{AKN+2014}
J.~Alglave, D.~Kroening, V.~Nimal and D.~Poetzl. 
\newblock  Don't Sit on the Fence - A Static Analysis Approach to Automatic Fence Insertion.
\newblock In {\em CAV}, pages(508-524), 2014.

\bibitem{AKN+2013}
J.~Alglave, D.~Kroening, V.~Nimal and M.~Tautschnig. 
\newblock   Software Verification for Weak Memory via Program Transformation.
\newblock In {\em ESOP}, pages(512-532), 2013.

\bibitem{FBP2011}
M.~Faouzi, A.~Bouajjani and G.~Parlato.
\newblock Getting Rid of Store-Buffers in TSO Analysis.
\newblock In {\em CAV}, pages (99-115), 2011.

\bibitem{AAC+2013}
P. A.~Abdulla, M. F.~Atig, Y. F.~Chen, C.~Leonardsson and A.~Rezine.
\newblock Memorax, a Precise and Sound Tool for Automatic Fence Insertion under TSO.
\newblock In {\em TACAS}, pages(530-536), 2013.

\bibitem{AAC+2012}
P. A.~Abdulla, M. F.~Atig, Y. F.~Chen, C.~Leonardsson and A.~Rezine.
\newblock Automatic fence insertion in integer programs via predicate abstraction.
\newblock In {\em SAS}, pages(164-180), 2012.

\bibitem{HJM+2002}
T.A.~Henzinger, R.~Jhala, R.~Majumdar and G.~Sutre.
\newblock Lazy abstraction
\newblock In {\em POPL}, pages(58-70), 2002.

\bibitem{VN2011}
V.~Vafeiadis and F.Z.~Nardelli.
\newblock Verifying fence elimination optimisations
\newblock In {\em SAS}, pages(146-162), 2011.

\bibitem{BDM2013}
A.~Bouajjani, E.~Derevenetc and R.~Meyer.
\newblock Checking and Enforcing Robustness against TSO.
\newblock In {\em ESOP}, pages(533-553), 2013.

\bibitem{Rid2010}
T.~Ridge
\newblock A Rely-Guarantee proof system for x86-TSO.
\newblock In {\em VSTTE}, pages(55-70), 2010.

\bibitem{JLP+2014}
S.~Jagannathan, V.~Laporte, G.~Petri, D.~Pichardie and J.~Vitek.
\newblock Atomicity refinement for verified compilation.
\newblock In {\em PLDI}, pages(27-27), 2014.

\bibitem{KPH2010}
E.~Koskinen, M.~Parkinson and M.~Herlihy.
\newblock Coarse-grained transactions
\newblock In {\em POPL}, pages(19-30), 2010.

\bibitem{AC2009}
F.~Aleen and N.~Clark.
\newblock Commutativity analysis for software parallelization: letting program transformations see the big picture.
\newblock In {\em ASPLOS}, pages(241-252), 2009.

\bibitem{RD1997}
M.C.~Rinard and P.C.~Diniz.
\newblock Commutativity analysis: a new analysis technique for parallelizing compilers.
\newblock In {\em TOPLAS}, pages(942-991), 1997.

\bibitem{PGZ+2011}
P.~Prabhu, S.~Ghosh, Y.~Zhang, N.P.~Johnson and D.I.~August.
\newblock Commutative set: a language extension for implicit parallel programming.
\newblock In {\em PLDI}, pages(1-11), 2011.

\bibitem{Lip1975}
R.J.~Lipton.
\newblock Reduction: a method of proving properties of parallel programs.
\newblock In {\em CACM}, pages(717-721), 1975.

\bibitem{LFF2012}
H.~Liang, X.~Feng and M.~Fu.
\newblock A rely-guarantee-based simulation for verifying concurrent program transformations.
\newblock In {\em POPL}, pages(455-468), 2012.

\bibitem{JW2011}
A.J.~Turon and M.~Wand.
\newblock A separation logic for refining concurrent objects.
\newblock In {\em POPL}, pages(247-258), 2011.

\bibitem{Fen2009}
X.~Feng.
\newblock Local rely-guarantee reasoning.
\newblock In {\em POPL}, pages(315-327), 2009.

\bibitem{SSO+2010}
P.~Sewell, S.~Sarkar, S.~Owens, F.Z.~Nardelli and M.O.~Myreen.
\newblock x86-TSO: a rigorous and usable programmer's model for x86 multiprocessors.
\newblock In {\em CACM}, pages(89-97), 2010.

\bibitem{BA2008}
H.J.~ Boehm and S.V.~Adve.
\newblock Foundations of the C++ concurrency memory model.
\newblock In {\em PLDI}, pages(68-78), 2008.

\bibitem{BOS+2011}
M.~Batty, S.~Owens, S.~Sarkar, P.~Sewell and T.~Weber.
\newblock Mathematizing C++ concurrency.
\newblock In {\em POPL}, pages(55-66), 2011.

\bibitem{BWB+2011}
J.C.~Blanchette, T.~Weber, M.~Batty, S.~Owens and S.~Sarkar.
\newblock Nitpicking c++ concurrency.
\newblock In {\em PPDP}, pages(113-124), 2011.

\bibitem{SSA+2011}
S.~Sarkar, P.~Sewell, J.~Alglave, L.~Maranget and D.~Williams.
\newblock Understanding POWER multiprocessors.
\newblock In {\em PLDI}, pages(175-186), 2011.

\bibitem{HMS+2012}
S.M.~Haim, L.~Maranget, S.~Sarkar, K.~Memarian, J.~Alglave, S.~Owens, R.~Alur, M.M.K.~Martin, P.Sewell and D.~Williams.
\newblock An axiomatic memory model for POWER multiprocessors.
\newblock In {\em CAV}, pages(495-512), 2012.

\bibitem{AFI+2009}
J.~Alglave, A.Fox, S.Ishtiaq, M.O.~Myreen, S.Sarkar, P.Sewell and F.Z.~Nardelli.
\newblock The semantics of power and ARM multiprocessor machine code.
\newblock In {\em DAMP}, pages(13-24), 2009.

\bibitem{SVN+2013}
J.~Sevcik, V.~Vafeiadis, S.~Jagannathan and P.~Sewell.
\newblock CompCertTSO: A Verified Compiler for Relaxed-Memory Concurrency.
\newblock In {\em JACM}, 2013.




\end{thebibliography}
